Singleton Class -  It is a desing pattern which  ensure that a class has only one instance , and provides a global point of access to it . 

When to Use :  
1 .When there should be exactly one instance of the class .
2 .Singleton class are use for logging , caching ,thread pool ,data base connection .
3 DataBase Connection : Using Singleton pattern ensures that there is only one instance of database connection object .
4 Caching : By using Singleton pattern for cache manager , we can ensure that there is only one instance of cache , avoiding  duplication and ensuring 
  consistency in data .

Steps : 
1. Instance Variable - private static .
2. Constructor - private .
3. static method ( getInstance()) that return the object of singleton class .

Ways to implement singleton Desing pattern : 
1. Classic implementation (Lazy Instantiation)  : Makeing getInstance() static 
2. Make getInstance() synchronized .
3. Eager Instantiation : Static initialzr based implementation .
4. Use "Double checked Locking" - i.e using synchronized block .

Simple Structure : 
class Singleton 
{
   private static Singleton s ; 

  private Singleton() 
   {
   }

public static Singleton getInstance() 
{
   if(s == null)  s= new Singleton() ;
    return s ;
}
}

--------------------------------------
Question : Compare the Implementation of Singleton and Immutable class ? 
Ans :  Immutable class means once the object is Created we can't change its content .All wrapper class ( Integer , Byte ) , 
        String class is immutable .
Steps : 
1. Make class - final so inheritance not possible . 
2. declare variables - private , Final . 
3. Create constructor having all the fields , performing deep copy . 
4 . Create only getter performing deep copy . 


