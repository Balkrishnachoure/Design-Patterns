

2. Factory Design pattern : It is used to create objects without specifying the exact class of object  that will be created .
   Factory Design Pattern helps to create loosely coupled OOPs design .  
   Whenever we use new Keyword(and instantiate a class)  we are providing concrete implementation and voilating the principle that we should favour
   abstraction .
   In factory pattern we can instantiate all the classes in a seperate class  .(Fundametal principle of Factory DP)  .

  UsesCases : 
1. Object Creation : It hepls to Encapsulate the object creation mechanism .
2. Decouple the code - Factory hepls to decouple the code from concrete implementation . Clients interact with factory interface rather then directly 
   instantiating the object .
3. Dependency Injection : Factories are used in dependency injection frameworks to manage the creation of objects and resolve dependencies .It provide a way to 
   inject dependencies into objects without coupling the code to specific implementation .

3. Builder Pattern : Builder Pattern allows you to construct a complex object step by step . It seperate the construction of complex object from its 
   representation ,allowing the same construction process to create different representations .

 Why builder Pattern : It is useful when dealing with the objects that have large number of optional parameters .

 UseCases :
1 .Flexible object creation : When an object can be created in multiple ways or has many optional parameters , the builder pattern allows the construction 
                           process more flexible and intutive .
2. Hence it is the efficient tool for creating the objects in flexible ,readable and maintainable way .



