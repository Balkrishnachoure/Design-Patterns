Format : About.
         UseCases.

Three types of Desing patterns are there  :
1. Creational Design pattern :  It provide the various object creation mechanism which increase flexibilty and resue of existing code . 

1.Singleton Desing pattern . 
2.factory pattern.
3.Builder pattern .
4 .Prototype pattern .

2.Behavioral Design pattern : These are the design patterns that identify common communication pattern between the objects .These increases the flexibilty 
in carrying out communication .
1.Strategy pattern .
2.Observer Pattern .
3.Command Pattern .
4.Template Pattern .
5.Visitor pattren .
6.Null object and iterator pattern .

3.Structual Design pattern : Structural Desing patterns are about how classes and objects can be composed to form Larger structure .It simplifies structure of
software components  by identifying relationship between them .

1. Decorator Pattern .
2. Facade pattern. 
3. Adapter pattern .


1 .Singleton Design Pattern : It is a desing pattern which  ensure that a class has only one instance , and provides a global point of access to it . 

 When to Use :  
1 .When there should be exactly one instance of the class .
2 .Singleton class are use for logging , caching ,thread pool ,data base connection .
3 DataBase Connection : Using Singleton pattern ensures that there is only one instance of database connection object .
4 Caching : By using Singleton pattern for cache manager , we can ensure that there is only one instance of cache , avoiding  duplication and ensuring 
  consistency in data .

Some Points to cover : 
1. Private static variable . 
2. Private constructor .
3 public static factory method - getInstance() 

Ways to implement singleton Desing pattern : 
1. Classic implementation : Makeing getInstance() static 
2. Make getInstance() synchronized .
3. Eager Instantiation : Static initialzr based implementation .
4. Use "Double checked Locking" - i.e using synchronized block .

2. Factory Design pattern : It is used to create objects without specifying the exact class of object  that will be created .
   Factory Design Pattern helps to create loosely coupled OOPs design .  
   Whenever we use new Keyword(and instantiate a class)  we are providing concrete implementation and voilating the principle that we should favour
   abstraction .
   In factory pattern we can instantiate all the classes in a seperate class  .(Fundametal principle of Factory DP)  .

  UsesCases : 
1. Object Creation : It hepls to Encapsulate the object creation mechanism .
2. Decouple the code - Factory hepls to decouple the code from concrete implementation . Clients interact with factory interface rather then directly 
   instantiating the object .
3. Dependency Injection : Factories are used in dependency injection frameworks to manage the creation of objects and resolve dependencies .It provide a way to 
   inject dependencies into objects without coupling the code to specific implementation .

3. Builder Pattern : Builder Pattern allows you to construct a complex object step by step . It seperate the construction of complex object from its 
   representation ,allowing the same construction process to create different representations .

   Why builder Pattern : Let suppose we have large no of parameters 



